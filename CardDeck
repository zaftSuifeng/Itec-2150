package homework_2;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;
import java.nio.file.FileAlreadyExistsException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.Scanner;

/**
 * @author david
 *
 */
public class CardDeck extends Card
{
	

	ArrayList<Card> cardDeck = new ArrayList<Card>();
	ArrayList<String> deck = new ArrayList<String>();
	
	/** 
	 * Create and initialize the crontructor CardDeck
	 */
	public CardDeck()
	{
		super();
	}
	
	/** Method: cardDeck
	 *  Creates and intilizes the instance of a deck of cards
	 * @return deck
	 */
	public ArrayList<String> cardDeck()
	{
		for (int j = 0; j < 4; j++)
		{
			Suit value = Suit.values()[j];
			for(int i = 0; i < 13; i++)
			{
				Card card = new Card(Rank.values()[i], value);
				cardDeck.add(card);
				
			}
		}
		
		Iterator<Card> cardIterator = cardDeck.iterator();
		while (cardIterator.hasNext())
		{
			Card aCard = cardIterator.next();
			deck.add(aCard.getRank() + " of " + aCard.getSuit());
		}
		return deck;
		
	
		
	}
	
	
	

	/** Method: shuffle
	 *  Create and initialize the instance of shuffle
	 * @return 
	 */
	public ArrayList<String> shuffle()
	{
		Collections.shuffle(cardDeck);
		ArrayList<String> temp = new ArrayList<String>();
		Iterator<Card> cardIterator = cardDeck.iterator();
		while (cardIterator.hasNext())
		{
			Card aCard = (Card) cardIterator.next();
			temp.add(aCard.getRank() + " of " + aCard.getSuit());
			deck = temp;
		}
		return deck;
	}
	
	/** Method: selectCard
	 *  Take the user input cardNumber and return the card at that location
	 *  Throw a message if the user enters an invalid cardNumber
	 * @param cardNumber
	 * @return Card
	 */
	@SuppressWarnings("finally")
	public Card selectCard(int cardNumber)
	{
		try 
		{
			if (cardNumber <= 51)
			{
				
			}
			else
			{
				throw new InvalidDeckException("The location you entered was not found in the Deck");
			}

		}
		finally
		{
			return null;
		}
		
		/** Method: saveDeck
		 *  Create and initialize the instance of saveDeck
		 * @return 
		 * @return
		 */
	}
	@SuppressWarnings("finally")
	public  ArrayList<String> saveDeck(String fileName) throws FileNotFoundException, FileAlreadyExistsException {
		File newFile = new File(fileName);
		try
		{
			if (!newFile.exists())
			{
				PrintWriter pw = new PrintWriter(fileName);
				String str = "";
				for (int index = 0; index < 13; index++)
				{
					pw.print(deck.get(index) + ", ");
				
				}
				pw.print("\n");
				for (int index = 13; index < 26; index++)
				{
					pw.print(deck.get(index) + ", ");
				
				}
				pw.print("\n");
				for (int index = 26; index < 39; index++)
				{
					pw.print(deck.get(index) + ", ");
				
				}
				pw.print("\n");
				for (int index = 39; index < 52; index++)
				{
					pw.print(deck.get(index) + ", ");
				
				}
				pw.close();
				
			}
			else
			{
				throw new FileAlreadyExistsException("That file name is already in use.");
			}
		}
		finally
		{
			return deck;
		}
	}
	
	public ArrayList<String> loadDeck(String fileName) throws FileNotFoundException
	{
		ArrayList<String> deck = new ArrayList<String>();
		try 
		{
			FileReader fr = new FileReader(fileName);
			Scanner inFile = new Scanner(fr);
			while(inFile.hasNextLine())
			{
				deck.add(inFile.nextLine());
			}
			inFile.close();
			} 
		catch (FileNotFoundException e) 
		{
			throw new FileNotFoundException("File " + fileName + " was not found. Please select another file");
		}
		return deck;
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() 
	{
		//for loop to print out each line
		String str = "";
				for (int index = 0; index < 13; index++)
				{
					str += (deck.get(index) + ", ");
				
				}
				str += "\n";
				for (int index = 13; index < 26; index++)
				{
					str += (deck.get(index) + ", ");
				
				}
				str += "\n";
				for (int index = 26; index < 39; index++)
				{
					str += (deck.get(index) + ", ");
				
				}
				str += "\n";
				for (int index = 39; index < 52; index++)
				{
					str += (deck.get(index) + ", ");
				
				}
				
				
				return str;
	}
}

	
	


